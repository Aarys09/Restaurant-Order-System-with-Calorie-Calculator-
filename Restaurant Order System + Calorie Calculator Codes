#include <iostream>
#include <vector>
#include <string>
#include <iomanip>

using namespace std;

// Function declarations (cyrus)
void mainmenu();
void response();
void custinfo();
void showlogo();
void waiting();
void payment();


// Define color codes
#define green "\033[96m"
#define reset "\033[0m"
#define red "\033[91m"
#define boldyellow "\033[93m"

// Structure representing a menu item with information (name, calorie content, price) 
struct MenuItem {
    string name;
    int calorie;
    double price;
};

// Food menu items
vector<MenuItem> foodMenu = {
    {"Ceaser Salad", 100, 8.50},
    {"Omelette", 154, 7.00},
    {"Meat Sandwich", 252, 6.00},
    {"Nasi Lemak", 398, 5.00},
    {"Fried Rice", 245, 6.00},
    {"Fried Noodle", 260, 5.00},
    {"Chicken Grilled", 145, 10.00},
    {"Fish and Chip", 650, 13.00},
};

// Beverages menu items
vector<MenuItem> beveragesMenu = {
    {"Water", 0, 1.00},
    {"Apple Juice", 113, 3.50},
    {"Orange Juice", 111, 4.00},
    {"Green Tea", 2, 3.00},
    {"Milkshake", 229, 5.00},
};

// Structure representing an ordered item (name, quantity, price) (shervona)
struct OrderItem {
    string name;
    int quantity;
    double price;

};

// Function to stimulate waiting
void waiting(unsigned int mseconds)
{
    clock_t goal = mseconds + clock();
    while (goal > clock());
}

// Function to display the main menu (shervona)
void mainmenu() {
    system("cls");
    std::cout << std::endl << " \n\t\t\t \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2 MAIN MENU \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2";
    std::cout << boldyellow << "\n\n\t\t\t [ 1 ] Add FOOD to cart" << reset << std::endl;
    std::cout << boldyellow << "\t\t\t [ 2 ] Add BEVERAGES to cart" << reset << std::endl;
    std::cout << boldyellow << "\t\t\t [ 3 ] EXIT" << reset << std::endl;
    std::cout << "\t\t\t __________________________________________" << std::endl;
    std::cout << green << "\n\n\t\t\t Enter choice: " << reset;
}

// Function to display response options (response for calories more or less than the min and max goal) (alia)
void responseLessMore() {
    std::cout << "\n";
    std::cout << std::endl << " \t\t\t \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2 OPTIONS \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2";
    std::cout << boldyellow << "\n\n\t\t\t [ 4 ] CONTINUE to Payment" << reset << std::endl;
    std::cout << boldyellow << "\t\t\t [ 5 ] CHANGE Items Quantity in My Cart" << reset << std::endl;
    std::cout << boldyellow << "\t\t\t [ 6 ] ADD Items in My Cart" << reset << std::endl;
    std::cout << boldyellow << "\t\t\t [ 3 ] EXIT" << reset << std::endl;
    std::cout << "\t\t\t ______________________________________________________" << std::endl;
    std::cout << green << "\n\n\t\t\t Enter choice: " << reset;
}

// Function to display response options when reaching the goal
void responseInGoal() {
    std::cout << "\n";
    std::cout << std::endl << " \t\t\t \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2 OPTIONS \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2";
    std::cout << boldyellow << "\n\n\t\t\t [ 4 ] CONTINUE to Payment" << reset << std::endl;
    std::cout << boldyellow << "\t\t\t [ 3 ] EXIT" << reset << std::endl;
    std::cout << "\t\t\t ______________________________________________________" << std::endl;
    std::cout << green << "\n\n\t\t\t Enter choice: " << reset;

}

// Function to display response options when cart is empty
void responseEmptyCart() {
    std::cout << "\n";
    std::cout << std::endl << " \t\t\t \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2 OPTIONS \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\n";
    std::cout << boldyellow << "\n\t\t\t [ 6 ] ADD New Items in My Cart" << reset << std::endl;
    std::cout << boldyellow << "\t\t\t [ 3 ] EXIT" << reset << std::endl;
    std::cout << "\t\t\t ______________________________________________________" << std::endl;
    std::cout << green << "\n\n\t\t\t Enter choice: " << reset;

}

// Function to display the menu (food/beverages) (cyrus)
void displayMenu(const vector<MenuItem>& menu, const string& category) {
    std::cout << "\n\t\t\t\t\t\t\t" << category << " Menu\n";
    std::cout << "\t\t\t-------------------------------------------------------------------------\n";
    std::cout << "\t\t\t No" << setw(15) << left << "\tItem Name" << setw(10) << left << "\t\tCalorie" << setw(15) << left << "\tPrice per Unit\n";
    std::cout << "\t\t\t-------------------------------------------------------------------------\n";

    for (int i = 0; i < menu.size(); ++i) {
        std::cout << "\t\t\t " << i + 1 << "\t" << setw(15) << left << menu[i].name << setw(10) << "\t    " << left << menu[i].calorie << "\t\tRM" << setw(9) << left << menu[i].price << "\n";
    }

    std::cout << "\t\t\t-------------------------------------------------------------------------\n";
}

//Function for display logo (cyrus)
void showlogo() {
    std::cout << "\n\n";
    std::cout << green << "\n\t\t\t\t *****    **      **  ********  *******  *******   " << reset;
    std::cout << green << "\n\t\t\t\t**     *   **    **      **     **       **        " << reset;
    std::cout << green << "\n\t\t\t\t**     *    **  **       **     **       **        " << reset;
    std::cout << green << "\n\t\t\t\t*******       **         **     *******  *******   " << reset;
    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
    std::cout << green << "\n\t\t\t\t *****        **         **     *******  *******   " << reset;
    std::cout << green << "\n\n\t\t\t  + --------------------- HealthyBytes --------------------- + " << reset;
    std::cout << "\n\n\n\n\t\t\t\tWELCOME TO HEALTHYBYTES [Press ENTER to START] ";
    std::cin.get();//get input ENTER
    waiting(1500);// simulate waiting 
    system("cls");//to clear all screen
}

// Function to display the order items (cyrus)
void displayOrder(const vector<OrderItem>& orderItems) { //array 
    cout << "\n\t\t\tYour Cart:\n";
    cout << "\t\t\t--------------------------------------\n";
    cout << "\t\t\tNo\t" << setw(15) << left << "Item Name" << setw(10) << left << "Quantity\n";
    cout << "\t\t\t--------------------------------------\n";

    for (int i = 0; i < orderItems.size(); ++i) {
        cout << "\t\t\t" << i + 1 << "\t" << setw(15) << left << orderItems[i].name << setw(10) << left << orderItems[i].quantity << "\n";
    }

    cout << "\t\t\t--------------------------------------\n";
}

// Function to handle the payment process (alia)
void payment(double FinalPrice, const vector<OrderItem>& orderItems, double FINALcalorie) {

    std::cout << "\n\t\t\t\t\tPAYMENT\n";
    std::cout << "\t\t\t---------------------------------------\n";
    std::cout << "\t\t\tNo\t" << setw(15) << left << "Item Name" << setw(10) << left << "\t     Quantity\n";
    std::cout << "\t\t\t---------------------------------------\n";

    for (int i = 0; i < orderItems.size(); ++i) {
        cout << "\t\t\t" << i + 1 << "\t" << setw(15) << left << orderItems[i].name << "\t" << setw(25) << left << orderItems[i].quantity << "\n";
    }

    cout << "\t\t\t---------------------------------------\n";

    std::cout << "\t\t\tTotal Price: " << green << "RM" << FinalPrice << "\n" << reset;
    std::cout << "\t\t\tTotal Calorie: " << green << FINALcalorie << "\n" << reset;
    std::cout << "\t\t\t---------------------------------------\n";
    std::cout << boldyellow << "\n\t\t\t[A] Cash Payment\n" << reset;
    std::cout << boldyellow << "\t\t\t[B] Online Payment\n" << reset;
    std::cout << "\t\t\t---------------------------------------\n";
    std::cout << green << "\n\t\t\tChoose payment method: " << reset;

}

// Function to get customer information (alia)
void info(string& name) {
    string contactNo, tableNo;
    int userMinCalorie, userMaxCalorie;
    //header
    std::cout << std::endl << " \t\t\t \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2 WELCOME TO HEALTHYBYTES \xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2\xB2" << std::endl;
    //require customer to enter their username
    std::cout << "\n\t\t\t Enter Name: ";
    std::cin >> name;
    //require customer to enter their contact no
    std::cout << "\n\t\t\t Enter Contact Number: ";
    std::cin >> contactNo;//get input
    std::cout << "\n\t\t\t Enter Table No.:  ";
    std::cin >> tableNo;//get input
}

// The main function where the program starts execution 
int main() {
    //declaration section
    string name;
    double totalCalorieFood = 0.0;
    double totalPriceFood = 0.0;
    double totalCalorieBeverages = 0.0;
    double totalPriceBeverages = 0.0;
    double FINALCalorie = 0.0;
    double FINALPrice = 0.0;

    vector<OrderItem> orderItems;
    int userMinCalorie, userMaxCalorie;

    // Welcome screen and gathering customer information 
    showlogo();
    info(name); // calls function customer info
    system("cls");
    cout << "\n\n\t\t\t#############################################\n\n";
    // audrylyia
    std::cout << boldyellow << "\n\t\t\t      Hello " << name << "," << reset;
    std::cout << "\n\t\t\t      Welcome to HealthyBytes !\n";
    cout << "\n\n\t\t\t#############################################\n\n";
    // Calorie goal input
    std::cout << "\n\t\t\tEnter your " << boldyellow << "MINIMUM " << reset << "calorie goal: ";
    cin >> userMinCalorie;
    std::cout << "\n\t\t\tEnter your " << boldyellow << "MAXIMUM " << reset << "calorie goal: ";
    cin >> userMaxCalorie;

    //declaration for FOOD & BEVERAGES List
    int foodChoice, quantity;
    int beverageChoice;
    char ans;
    int key;
    int res;
    double totalFOOD = 0.0;
    double totalBEVERAGES = 0.0;

    do {
    choose_again:
        system("cls");
        mainmenu();
        cin >> key;

        if (key == 3) {
            break;
        }
        else if (key == 1) {
            system("cls");
            displayMenu(foodMenu, "Food"); //display
            std::cout << boldyellow << "\n\t\t\tEnter the FOOD item Number: " << reset;
            cin >> foodChoice;
            std::cout << boldyellow << "\t\t\tEnter the Quantity: " << reset;
            cin >> quantity;
            totalCalorieFood += foodMenu[foodChoice - 1].calorie * quantity;
            totalFOOD = totalCalorieFood;
            orderItems.push_back({ foodMenu[foodChoice - 1].name, quantity,  foodMenu[foodChoice - 1].price });
            std::cout << "\n\t\t\tYou added " << boldyellow << foodMenu[foodChoice - 1].name << reset << " to Your Cart.\n";
            waiting(1500);
            system("cls");
            displayOrder(orderItems);
        }
        else if (key == 2) {
            //coding for keluar menu air
            system("cls");
            displayMenu(beveragesMenu, "\t\t\tBeverages");
            std::cout << boldyellow << "\n\t\t\tEnter the BEVERAGE item number: " << reset;
            cin >> beverageChoice;
            std::cout << boldyellow << "\t\t\tEnter the Quantity: " << reset;
            cin >> quantity;
            totalCalorieBeverages += beveragesMenu[beverageChoice - 1].calorie * quantity;

            totalBEVERAGES = totalCalorieBeverages;

            orderItems.push_back({ beveragesMenu[beverageChoice - 1].name, quantity,beveragesMenu[beverageChoice - 1].price });

            std::cout << "\n\t\t\tYou added " << boldyellow << beveragesMenu[beverageChoice - 1].name << reset << " to Your Cart.\n";
            waiting(1500);
            system("cls");
            displayOrder(orderItems);
        }
        else {
            // Handling invalid input
            cout << red << "\n\t\t\tPLEASE CHOOSE AN OPTION!" << reset;
            goto choose_again;

        } //close first loop

        //Ask if the user wants to add more order
        std::cout << green << "\n\t\t\tDo you wish to order anything else? (y/n): " << reset;
        cin >> ans;
        if (ans == 'y') {
            goto choose_again;
            system("cls");
        }
        else if (ans == 'n') {
            // loop for FINALcalorie
            // Finalizing the order
            system("cls");
            displayOrder(orderItems);
            double FINALcalorie;
            FINALcalorie = totalBEVERAGES + totalFOOD;

            std::cout << "\n\t\t\tYour Total Calories is " << green << FINALcalorie << reset << ".";

            if (FINALcalorie > userMaxCalorie) {
                // Handling case where the calorie goal is exceeded
                std::cout << "\n\t\t\tOh dear, it seems you have " << red << "EXCEEDED " << reset << "your calorie goal.";
                std::cout << "\n\t\t\tWe encouraged you to remove some items to achieve your calorie goal!";
                waiting(3000);
                system("cls");
            retry:

                displayOrder(orderItems);
                std::cout << "\n\t\t\tYou have " << red << "EXCEEDED " << reset << "your calorie goal.";
                responseLessMore(); // Asking for user response
                cin >> res;// asking for response function
                system("cls");
                if (res == 4) {
                    // Handling payment
                    FINALPrice = 0.0;
                    for (size_t i = 0; i < orderItems.size(); i++)
                    {
                        FINALPrice += orderItems[i].price * orderItems[i].quantity;
                    }
                    payment(FINALPrice, orderItems, FINALcalorie);
                    char paymentOption;
                    cin >> paymentOption;

                    if (paymentOption == 'A') { // Cash payment
                        std::cout << boldyellow << "\n\t\t\tPlease make the Cash Payment at the Counter. Thank you!\n" << reset;
                        waiting(4000);

                        break;
                    }
                    else if (paymentOption == 'B') { // Online payment
                        std::cout << boldyellow << "\n\t\t\tRedirecting to online payment gateway...\n" << reset;
                        waiting(4000);

                        break;
                    }
                    else {
                        std::cout << "\n\t\t\tInvalid payment option. Please choose 1 or 2.\n"; // invalid input
                        payment(FINALPrice, orderItems, FINALcalorie);
                    }
                }            
                else if (res == 5) {
                    //code to edit cart or remove item
                    system("cls");
                    displayOrder(orderItems); // display current items in cart
                    //code to edit cart or remove item
                    int changeIndex;
                    std::cout << "\n\t\t\tEnter the index of the item you want to remove or change quantity: ";
                    cin >> changeIndex;

                    // Check if changeIndex is a valid index for the orderItems
                    if (changeIndex >= 1 && changeIndex <= orderItems.size()) {
                        // Declare a variable to store the new quantity
                        int newQuantity;

                        // Prompt the user to enter the new quantity (0 to remove)
                        std::cout << "\n\t\t\tEnter the new quantity (0 to remove): ";

                        // Read and store the user's input in the newQuantity variable
                        cin >> newQuantity;

                        if (newQuantity == 0) {
                            // Erase the item at the specified index from the orderItems
                            orderItems.erase(orderItems.begin() + (changeIndex - 1));
                        }
                        // Check if the newQuantity is greater than or equal to 1, indicating an update
                        else if (newQuantity >= 1) {
                            // Update the quantity of the item at the specified index in the orderItems container
                            orderItems[changeIndex - 1].quantity = newQuantity;
                        }
                        system("cls");
                        cout << boldyellow << "\n\t\t\tYOUR CART LIST" << reset;

                        waiting(1500);
                        goto retry;
                    }
                }
                else if (res == 6) {
                    //code to add items 
                    system("cls");
                    goto choose_again;// go back to appear mainmenu
                }
                // To exit program
                else if (res == 3) {
                    system("cls");

                    std::cout << "\n\n";
                    std::cout << green << "\n\t\t\t\t *****    **      **  ********  *******  *******   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *   **    **      **     **       **        " << reset;
                    std::cout << green << "\n\t\t\t\t**     *    **  **       **     **       **        " << reset;
                    std::cout << green << "\n\t\t\t\t*******       **         **     *******  *******   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
                    std::cout << green << "\n\t\t\t\t *****        **         **     *******  *******   " << reset;
                    std::cout << green << "\n\n\t\t\t  + --------------------- HealthyBytes --------------------- + " << reset;
                    std::cout << boldyellow << "\n\n\t\t\t\tTHANK YOU FOR VISITING US!" << reset;

                    break;
                }
                else {
                    cout << red << "\n\t\t\tCHOOSE ONE OPTION" << reset;
                    goto retry; //go back asking for response

                }

            }
            // User calorie is in range of their min and max goal calorie
            else if ((FINALcalorie >= userMinCalorie) && (FINALcalorie <= userMaxCalorie)) {
                cout << "\n\t\t\tYou achieved your " << green << "Goal!" << reset;

                responseInGoal(); //Call the function
                int ut; // Declare to user input
                cin >> ut;
                system("cls");

                // Check if the user input (ut) is equal to 4
                if (ut == 4) {
                    FINALPrice = 0.0; //Initialize
                    for (size_t i = 0; i < orderItems.size(); i++)
                    {
                        FINALPrice += orderItems[i].price * orderItems[i].quantity;
                    }
                    payment(FINALPrice, orderItems, FINALcalorie);
                    char paymentOption;
                    cin >> paymentOption;

                    if (paymentOption == 'A') { // Cash payment
                        std::cout << boldyellow << "\n\t\t\tPlease make the cash payment at the counter. Thank you!\n" << reset;
                        waiting(4000);

                        break;
                    }
                    else if (paymentOption == 'B') { // Online payment
                        std::cout << boldyellow << "\n\t\t\tRedirecting to online payment gateway...\n" << reset;
                        waiting(4000);

                        break;
      
                    }
                    else {
                        std::cout << red << "\n\t\t\tInvalid payment option. Please choose 1 or 2.\n" << reset;
                        payment(FINALPrice, orderItems, FINALcalorie);

                    }
                }
                else {
                    system("cls");

                    std::cout << "\n\n";
                    std::cout << green << "\n\t\t\t\t *****    **      **  ********  *******  *******   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *   **    **      **     **       **        " << reset;
                    std::cout << green << "\n\t\t\t\t**     *    **  **       **     **       **        " << reset;
                    std::cout << green << "\n\t\t\t\t*******       **         **     *******  *******   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
                    std::cout << green << "\n\t\t\t\t *****        **         **     *******  *******   " << reset;
                    std::cout << green << "\n\n\t\t\t  + --------------------- HealthyBytes --------------------- + " << reset;
                    std::cout << boldyellow << "\n\n\t\t\t\tTHANK YOU FOR VISITING US!" << reset;

                    break;
                }

                /*payment();*/
            }//continue loop for other condition (when user min calorie goal is less)
            else if (FINALcalorie < userMaxCalorie) {
                std::cout << "\n\t\t\tOh dear, it seems you " << red << "DOES NOT EXCEED " << reset << "your calorie goal.\n\t\t\tWe encouraged you to remove some or add items to achieve your calorie goal!";
                waiting(3000);
                system("cls");
            retry_again:
                displayOrder(orderItems);
                int replyy;
                std::cout << "\n\t\t\tYou " << red << "DOES NOT EXCEED " << reset << "your calorie goal.";
                responseLessMore();

                cin >> replyy;//asking for response function
                system("cls");

                if (replyy == 4) {
                    /* payment();*/
                    FINALPrice = 0.0;
                    for (size_t i = 0; i < orderItems.size(); i++)
                    {
                        FINALPrice += orderItems[i].price * orderItems[i].quantity;
                    }
                    payment(FINALPrice, orderItems, FINALcalorie);
                    char paymentOption;
                    cin >> paymentOption;

                    // cash payment
                    if (paymentOption == 'A') {
                        std::cout << boldyellow << "\n\t\t\tPlease make the cash payment at the counter. Thank you!\n" << reset;
                        waiting(4000);
                    }
                    // online payment
                    else if (paymentOption == 'B') {
                        std::cout << boldyellow << "\n\t\t\tRedirecting to online payment gateway...\n" << reset;
                        waiting(4000);
                    }
                    else {
                        std::cout << red << "\n\t\t\tInvalid payment option. Please choose 1 or 2.\n" << reset;
                        payment(FINALPrice, orderItems, FINALcalorie);  // Recursively call the payment function to get a valid input
                    }
                    waiting(4000);
                }
                else if (replyy == 5) {
                    //code to edit cart or remove item
                    system("cls");
                    displayOrder(orderItems); // display current items in cart
                    int changeIndex;
                    std::cout << "\n\t\t\tEnter the index of the item you want to remove or change quantity: ";
                    cin >> changeIndex;

                    if (changeIndex >= 1 && changeIndex <= orderItems.size()) {
                        int newQuantity;
                        std::cout << "\n\t\t\tEnter the new quantity (0 to remove): ";
                        cin >> newQuantity;
                        if (newQuantity == 0) {
                            orderItems.erase(orderItems.begin() + (changeIndex - 1));
                        }
                        else if (newQuantity >= 1) {
                            // Update the quantity of the selected item
                            orderItems[changeIndex - 1].quantity = newQuantity;
                        }
                        system("cls");
                        cout << "\n\t\t\tYOUR CART LIST";

                        //waiting(1500);
                        goto retry_again;
                    }
                }
                else if (replyy == 6) {
                    //code to add items 
                    system("cls");
                    goto choose_again;// go back to appear mainmenu
                }

                else if (replyy == 3) {
                    system("cls");

                    std::cout << "\n\n";
                    std::cout << green << "\n\t\t\t\t *****    **      **  ********  *******  *******   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *   **    **      **     **       **        " << reset;
                    std::cout << green << "\n\t\t\t\t**     *    **  **       **     **       **        " << reset;
                    std::cout << green << "\n\t\t\t\t*******       **         **     *******  *******   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
                    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
                    std::cout << green << "\n\t\t\t\t *****        **         **     *******  *******   " << reset;
                    std::cout << green << "\n\n\t\t\t  + --------------------- HealthyBytes --------------------- + " << reset;
                    std::cout << boldyellow << "\n\n\t\t\t\tTHANK YOU FOR VISITING US!" << reset;

                    break;
                }
                else {
                    cout << red << "\n\t\t\tCHOOSE ONE OPTION" << reset;
                    goto retry_again; //go back asking for response

                }

            }
            else {
                // when there is no items in cart
                responseEmptyCart();
                goto choose_again;

            }
        }
    } while (key != 3);
    system("cls");

    std::cout << "\n\n";
    std::cout << green << "\n\t\t\t\t *****    **      **  ********  *******  *******   " << reset;
    std::cout << green << "\n\t\t\t\t**     *   **    **      **     **       **        " << reset;
    std::cout << green << "\n\t\t\t\t**     *    **  **       **     **       **        " << reset;
    std::cout << green << "\n\t\t\t\t*******       **         **     *******  *******   " << reset;
    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
    std::cout << green << "\n\t\t\t\t**     *      **         **     **            **   " << reset;
    std::cout << green << "\n\t\t\t\t *****        **         **     *******  *******   " << reset;
    std::cout << green << "\n\n\t\t\t  + --------------------- HealthyBytes --------------------- + " << reset;
    std::cout << boldyellow << "\n\n\t\t\t\tTHANK YOU FOR VISITING US!" << reset;

}
